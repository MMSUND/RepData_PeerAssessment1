}
h()
rm(x, h)
}
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
rm(a)
j<-function() {
if(!exists("a")) {
a<-1
}else {
a<-a+1
}
print(a)
}
j()
j()
rm(j)
c <- 10
c(c = c)
iris
lapply(iris[,c(1,2,3,4), mean)
lapply(iris[,c(1,2,3,4)],mean)
apply(iris,2,mean)
apply(iris[,2:5], 1, mean)
apply(iris[,2:5],1,mean)
apply(iris,1:4,mean)
apply(iris[,1:4],mean)
apply(iris,1:4,mean)
apply(iris[,1:4],mean,na.rm=TRUE)
apply(iris[,1:4],2,mean,na.rm=TRUE)
apply(iris[,1:4],2,mean)
sapply(iris[,c(1,2,3,4)],mean)
iris$1
View[iris]
View[iris]
iris[iris$Species =="virginica",]
View(iris)
View(iris)
p<-iris[iris$Species =="virginica",]
iris[iris$Species =="setosa",]
s<-iris[iris$Species =="setosa",]
iris[iris$Species =="vesicolar",]
View(iris)
iris[iris$Species =="versicolor",]
r<-iris[iris$Species =="versicolor",]
split(iris,[p,s,r])
split(iris,iris$Species)
airquality
x<-10; y<-5;
x+y
f()
for (i in 1:2) {print(i)}
`for`()
`for`(i,1:2,print(i))
if(i==1) {print("yes")
} else {
print("no")
}
`if`(i==1,print("yes"),print("no"))
x[3]
x{3}
x<-1:12
`[`(1:12,3)]
x[3]
`[`(1:12,3)
{print(1); print(2); print(3)}
'{'(print(1),print(2),print(3))
sapply(1:12, add, 3)
sapply(1:12,add,3)
add<-function(x,y){
x+y
}
sapply(1:12,add,3)
sapply(1:12,`+`,3)
sapply(1:12,"add",3)
sapply(1:12,"+",3)
str(f(2,3,fg=1))
str(f(2,3,b=1))
F<-fuction(abcdefg, bcde, bcdefg){
list(a=abcdefg,b=bcde,c=bcdefg)
}
?mean
mean(1:10)
?mean
mean(1:10,trim=0.5)
mean(1:10,n=t)
mean(1:10,0.05)
mean(1:10, ,FALSE)
mean(,TRUE)
mean(,TRUEx=c(1:10,NA))
mean(,TRUE x=c(1:10,NA))
mean(, TRUE x=c(1:10, NA))
mean(, TRUE, x=c(1:10, NA))
args<-list(1:12,na.rm=TRUE)
mean(1:12,na.rm=TRUE)
f<-function(a=1,b=7){
c(a,b)
}
f()
h()
h<-function(a=7,b=d){
d<-(a^2)+4
c(a,b)
}
h<-function(a=7,b=d){
d<-(a^2)+4
c(a,b)
}
h()
d<-10
h<-function(a=7,b=d){
d<-(a^2)+4
c(a,b)
}
h()
f(stop("this is an error!"))
f<-function(x){
10
}
f(stop("this is an error!"))
stop("this is an error!")
while(random_no = 10){
random_no = generate new random number
}
f<-function(x){
x
10
}
f(stop("this is an error!"))
stop("this is an error!")
i()
i<-function(a,b){
a
}
i()
i<-function(a,b){
}
i()
i<-function(a,b){
c(missing(a),missing(b))
}
i()
i(a=1)
i(a=1,b=7)
i(7,9)
f<-function(x){
function(y)y+x
}
add<-function(x){
function(y)y+x
}
adders<-lapply(1:10,add,3)
adders[[1]]
adders<-lapply(1:10,add)
adders[[1]]
adders<-lapply(1:10,add,(3))
adders[[1]]
adders<-lapply(1:10,add)
adders[[1]]
adders[[10]]
adders[[1](3)
adders<-lapply(1:10,add)
adders[[1]]
adders[[10]]
adders[[1](3)
adders[[10]](3)
adders<-lapply(1:10,add)
adders[[1]]
adders[[1]](3)
f<-function(x=ls())
{
a<-9
x
}
f()
if(!is.null(x)&& x>0){
#do stuff with x
}
!is.null(x)&& x>0
rm(x)
!is.null(x)&& x>0
rm(x)
x<-NULL
!is.null(x)&& x>0
x>0&& !is.null(x)
type="o",cex=5,pch=20)
f<-function(...){
list(...)
}
f(a=1,b=5)
?sum
sum(3,5,na.mr=FALSE)
?sample
X<-sample(x=c(1:10,NA),20,replace=TRUE)
x<-sample(c(1:10,NA),20,replace=TRUE)
x
set.seed(7)
set.seed(7)
y<-runif()
y<-runif()
set.seed(7)
y<-runif()
set.seed(7)
y<-runif()
runif(10)
?runif
y=runif(20,min=0,max=1)
?cor
cor(x=x,y=ymethod=c("k","p"))
cor(x=x,y=y,method=c("k","p"))
cor(x=x,y=y,method="k",use="p"))
cor(x,y,method="k",use="p"))
cor(x,y,method="k",use="p")
f1<-function(x={y<-1;2}y=0){
x+y
}
f1<-function(x={y<-1;2},y=0){
x+y
}
f(x)
f1(x)
f1()
view airquality
view (airquality)
?airquality
lapply(airquality[,c(1)],mean)
tapply({airquality$Ozone},{airquality$month},{airquality$mean},na.rm=TRUE)
tapply({airquality$Ozone},{airquality$month},mean,na.rm=TRUE)
tapply(airquality$Ozone,airquality$month,mean,na.rm=TRUE)
tapply(airquality$Ozone,airquality$Month,mean,na.rm=TRUE)
read.csv
download.file(http://www.w3schools.com/xml/simple.xml)
library(XML)
install.packages()
install.packages("XML")
library(XML)
fileurl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[6]]
rootNode[[3]][[5]]
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
xmltreeparse("http://www.w3schools.com/xml/simple.xml,useInternal=TRUE")
install.packages(data.table)
install.packages("data.table")
library(data.table)
DT<-data.table
DT<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
head(DT,w=(,c(x+y)))
DT[,w:=x+y]
DT[,w:=x+z]
View(DT[,w:=x+z])
DT[,list(mean(x),sum(z))]
DT[],M:={temp<-(x+z)temp2(temp^5)}]
DT[],M:={temp<-(x+z)temp2(temp+5)}]
DT[,M:={temp<-(x+z)temp2(temp+5)}]
DT[,M:={temp<-(x+z),log2(temp+5)}]
DT[,M:={temp<-(x+z);log2(temp+5)}]
View(DT[,M:={temp<-(x+z);log2(temp+5)}])
Viewdownload.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
DT[,B:=mean(x+w),by=a]
DT[,b:=mean(x+w),by=a]
DT[,b:= mean(x+w),by=a]
DT[,a:=x>0]
View(DT[,a:=x>0]
View(DT[,a:=x>0]
DT[,a:=x>0]
View(DT[,a:=x>0])
DT[,b:=mean(x+w),by=a]
View(DT[,b:=mean(x+w),by=a])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
read.csv
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileurl,destfile = "C:/Users/mmsund/Documents/Getting & Cleaning Data/cameras.csv")
cameraData<-read.csv("./data/cameras.csv")
head(cameraData)
cameraData<-read.csv("./Getting & Cleaning Data/cameras.csv")
head(cameraData)
sum(!is.na(quiz[quiz$VAL>=24,"VAL"]))
sum(!is.na(cameraData[cameraData$VAL>=24,"VAL"]))
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx?accessType=DOWNLOAD"
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml?accessType=DOWNLOAD"
download.file(fileurl,destfile="C:/Users/mmsund/Documents/Getting & Cleaning Data/cameras.csv")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
length(zipcode[zipcode==21231])
length(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
install.packages("rJava")
install.packages("xlsx")
library(rJava)
fileurl1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv?accessType=DOWNLOAD"
download.file(fileurl1,destfile = "C:/Users/mmsund/Documents/Getting & Cleaning Data/cameras.csv")
download.file(fileurl1,destfile = "C:/Users/mmsund/Documents/Getting & Cleaning Data/Fss06pid.csv")
dateDownloaded <-date()
print(dateDownloaded)
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
DT <- fread(input="Fsspid.csv", sep=",")
DT <- fread(input="Fsspid.csv", sep=",")
DT <- fread(input="Fss06pid.csv", sep=",")
DT <- fread(input="Fss06pid.csv", sep=",")
DT<-fread(input="Fss06pid.csv",sep=",")
View(DT<-fread(input="Fss06pid.csv",sep=","))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
library(RCurl)
library(RCurl)
install.packages("bitops")
install.packages("bitops")
library(RCurl)
source("http://bioconductor.org/biocLite.R")
x[,1]
x<-data.frame("var1"=sample(1:5), "var2"=(6:10), "var3"=(11:15))
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x[,1]
View(iris)
object.size(iris)
install(curl)
install.packages(curl)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileurl,destfile = "C:/Users/mmsund/Documents/Getting & Cleaning Data/Fss06hid.csv")
library(data.table)
f <- file.path(getwd(), "Fss06hid.csv")
download.file(fileurl, f)
read.csv
read.csv(f)
a<-read.csv(f)
a
splitNames = strsplit(colnames(a),"wgtp")
splitNames[[123]]
GPD<-read.csv("C:/Users/mmsund/Documents/Getting & Cleaning Data/FGDP.csv",skip=4,nrows=190)
head(GPD)
View(GPD)
gsub(,,"")
gsub(",","",names(GPD))
GPD$x.4<-gsub(",","",GPD$X.4)
GPD$x.4
mean(GPD$x.4)
mean(x.4)
mean(GPD$x.4)
GPD$x.4<-as.numeric (gsub(",","",GPD$X.4))
GPD$x.4
mean(GPD$x.4)
grep("^United",countryNames)
b<-countryNames
edu<-read.csv("C:/Users/mmsund/Documents/Getting & Cleaning Data/FEDSTATS_Country.csv",header=TRUE)
head(edu)
colnames<-GPD$x.3
colnames
countryNames<-GPD$x.3
countryNames
head(edu)
mergedData=merge(GPD,edu,by.x="X",by.y="CountryCode")
dim(mergedData)
orderedData <- order(mergedData$"X.1", decreasing = TRUE, na.last = NA)
orderedData
head(GPD)
countryNames<-GPD$x.3
countryNames
countryNames<-GPD$X.3
countryNames
grep("^United",countryNames)
head(edu)
mergedData=merge(GPD,edu,by.x="X",by.y="CountryCode")
dim(mergedData)
View(mergedData)
grep("^Fiscal year end: June 30")
Special.Notes
grep("^Fiscal year end: June 30",mergedData$Special.Notes)
length()
length(1)
length[1]
install.packages(quantmod)
library(quantmod)
install.packages("quantmod")
library(quantmod)
readquantmod
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- data.frame(amzn)
View(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn <- data.frame(amzn)
View(amzn)
sum(format(as.Date(x = rownames(amzn), format = "%Y-%m-%d"), "%Y") == 2012)
sum(format(as.Date(x = rownames(amzn), format = "%Y-%m-%d"), "%Y%a") == "2012Mon")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot()
p<- xyplot(weight ~ Time | Diet, BodyWeight)
p()
View(p)
xyplot()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot()
plot(cars)
?par
plot(cars, type="l", colour="Blue")
plot(cars, type="b", colour="Blue")
?par
title(main="Autos", col.main="red", col.font="4")
trucks<-c(2, 5, 4, 5, 12)
plot(cars, type -"o", col="blue", ylim=c(1, 12))
lines(trucks, type="o", lty=5, col="red")
lines(trucks, type="o", lty=5, col="red", pch=15)
axis()
cars<-c(1,3,6, 4, 9)
plot(cars)
plot(cars, type="l", colour="Blue")
plot(cars, type="b", colour="Blue")
title(main="Autos", col.main="red", col.font="4")
trucks<-c(2, 5, 4, 5, 12)
plot(cars, type -"o", col="blue", ylim=c(1, 12))
lines(trucks, type="o", lty=5, col="red")
lines(trucks, type="o", lty=5, col="red", pch=15)
axis()
axis(1, at=1:5, labels=c("Mon", "Tue", "Wed", "Thu", "Fri"))
plot(cars, type="o", col="blue", ylim=c(0, 12), axes=FALSE)
lines(trucks, type="o", lty=5, col="red", pch=15)
axis(1, at=1:5, labels=c("Mon", "Tue", "Wed", "Thu", "Fri"))
axis(2)
title(main="Autos", col.main="red", col.font="4")
title(main="Autos", col.main="red", font.main="4")
box()
?par
text()
axis(2, las=1)
?par
legend("topleft", c("cars", "trucks"), lty=1:2, col=c("blue", "red"), pch=21:22)
suvs<-c(4, 4, 6, 6, 16)
autos_data<-data.frame(cars=cars, trucks=trucks, suvs=suvs)
plot_colors<-c("blue", "red", "forestgreen")
suvs()
View(suvs)
plot(autos_data, type="o", col=plot_colors, ylim=c(0, 16), axes=FALSE, xlab=days)
plot(autos_data, type="o", col=plot_colors, ylim=c(0, 16), axes=FALSE, xlab=Days)
plot(autos_data, type="o", col=plot_colors, ylim=c(0, 16), axes=FALSE, xlab="Days")
?par
?matrix
?tapply
DataImputed$week<-ifelse(as.POSIXlt(DataImputed$date)$wday %in% c(0, 6),'weekend', 'weekday')
data<-read.csv("activity/activity.csv")
setwd("~/GitHub/RepData_PeerAssessment1")
data<-read.csv("activity/activity.csv")
View(data)
steps_per_day<-aggregate(steps ~ date, data, sum)
head(steps_per_day)
View(steps_per_day)
hist(steps_per_day$steps, main = "Total Steps per Day", col="orange", xlab = "No. of Steps")
rmean<-mean(steps_per_day$steps)
rmedian<-median(steps_per_day$steps)
rmean
rmedian
dailyactivitypattern<-aggregate(steps ~ interval, data, mean)
head(dailyactivitypattern)
View(dailyactivitypattern)
plot(dailyactivitypattern, type="l", col="red", xlab="interval", ylab="steps",main = "Daily Activity pattern")
max_interval<-dailyactivitypattern[which.max(dailyactivitypattern$steps), 1]
narows<- is.na(data)
sum(narows)
library(Hmisc)
data$steps<-impute(data$steps, fun=mean)
View(data$steps)
Newdata <-data
View(Newdata)
Newsteps_per_day<-aggregate(steps ~ date, Newdata, sum)
hist(Newsteps_per_day$steps, main = "Total Steps per Day", col="orange", xlab = "No. of Steps")
rmeansteps<-mean(Newsteps_per_day$steps)
rmediansteps<-median(Newsteps_per_day$steps)
rmeansteps
rmediansteps
Newdata$WeekDay <- ifelse(weekdays(as.Date(Newdata$date))==c("Sunday"), "weekend", "weekday")
View(Newdata)
weekdayActivity <- aggregate(steps ~ WeekDay+interval, Newdata, mean)
ggplot(weekdayActivity, aes(interval, steps)) +
geom_line(color="blue") +
facet_wrap(~ WeekDay,nrow=2,ncol=1) +
xlab("5-minute interval") +
ylab("Number of steps")+theme_light()
